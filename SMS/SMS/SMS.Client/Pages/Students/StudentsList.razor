@page "/students-list"
@using SMS.Shared.Models
@rendermode InteractiveAuto

<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="mb-0">Students List</h2>
        <a href="/add-student" class="btn btn-primary"><i class="bi bi-plus-circle"></i> Add New Student</a>
    </div>

    @if (!AllStudents.Any())
    {
        <div class="alert alert-secondary text-center">
            <em>Loading students...</em>
        </div>
    }
    @if (AllStudents.Count > 0)
    {
        <div class="table-responsive shadow-sm rounded border">
            <table class="table table-striped table-hover mb-0">
                <thead class="table-info">
                <tr>
                    <th class="fw-normal">ID</th>
                    <th class="fw-normal">First Name</th>
                    <th class="fw-normal">Middle Name</th>
                    <th class="fw-normal">Last Name</th>
                    <th class="fw-normal">Email</th>
                    <th class="fw-normal">Phone</th>
                    <th class="fw-normal">Country</th>
                    <th class="fw-normal">Edit</th>
                    <th class="fw-normal">Delete</th>
                </tr>
                </thead>
                <tbody class="table-group-divider">
                @foreach (var student in PagedStudents)
                {
                    <tr>
                        <td>@student.Id</td>
                        <td class="text-capitalize">@student.FirstName</td>
                        <td class="text-capitalize">@student.MiddleName</td>
                        <td class="text-capitalize">@student.LastName</td>
                        <td>@student.EmailAddress</td>
                        <td>@student.PhoneNumber</td>
                        <td class="text-capitalize">@student.Country</td>
                        <td>
                            <a href="/student/edit/@student.Id" class="btn btn-sm btn-outline-success"><i class="bi bi-pencil-square"></i> Edit</a>
                        </td>
                        <td>
                            <a href="/student/delete/@student.Id" class="btn btn-sm btn-outline-danger"><i class="bi bi-archive"></i> Delete</a>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
        
        <div>
            @if (TotalPages > 1)
            {
                <nav class="mt-3">
                    <ul class="pagination justify-content-center">
                        <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
                            <button class="page-link" @onclick="PrevPage">Prev</button>
                        </li>

                        @for (int i = 1; i <= TotalPages; i++)
                        {
                            <li class="page-item @(CurrentPage == i ? "active" : "")">
                                <button class="page-link" @onclick="() => GoToPage(i)">@i</button>
                            </li>
                        }

                        <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
                            <button class="page-link" @onclick="NextPage">Next</button>
                        </li>
                    </ul>
                </nav>
            }

        </div>
    }
    else
    {
        <div class="alert alert-info text-center">
            There are no students in the system yet.
        </div>
    }
</div>

@code {
    private List<Student> AllStudents { get; set; } = new();
    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 10;
    private int TotalPages => (int)Math.Ceiling(AllStudents.Count / (double)PageSize);
    
    private IEnumerable<Student> PagedStudents => AllStudents.Skip((CurrentPage - 1) * PageSize).Take(PageSize);

    private async Task LoadAllStudents()
    {
        var students = await StudentService.GetAllStudentsAsync();
        AllStudents.Clear();
        
        AllStudents.AddRange(students);
        
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadAllStudents();
    }

    private void GoToPage(int page)
    {
        if (page < 1) page = 1;
        if (page > TotalPages) page = TotalPages;
        CurrentPage = page;
    }

    private void NextPage() => GoToPage(CurrentPage + 1);
    private void PrevPage() => GoToPage(CurrentPage - 1);
}
